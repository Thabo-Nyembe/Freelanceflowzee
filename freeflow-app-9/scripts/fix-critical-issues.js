#!/usr/bin/env node

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class CriticalIssueFixer {
  constructor() {
    this.fixes = [];
    this.issues = [];
  }

  async executeCommand(command) {
    return new Promise((resolve) => {
      exec(command, { maxBuffer: 1024 * 1024 * 10 }, (error, stdout, stderr) => {
        resolve({
          success: !error,
          stdout: stdout || '',
          stderr: stderr || '',
          error: error
        });
      });
    });
  }

  async log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
  }

  async fixWebpackCache() {
    await this.log('🔧 Fixing webpack cache corruption...');
    
    const commands = [
      'rm -rf .next',
      'rm -rf node_modules/.cache',
      'rm -rf test-results',
      'rm -rf playwright-report',
      'rm -rf tsconfig.tsbuildinfo'
    ];
    
    for (const cmd of commands) {
      const result = await this.executeCommand(cmd);
      if (result.success) {
        await this.log(`✅ Executed: ${cmd}`);
      } else {
        await this.log(`⚠️ Failed: ${cmd} - ${result.stderr}`);
      }
    }
    
    this.fixes.push('Cleared webpack cache corruption');
  }

  async fixAvatarServing() {
    await this.log('🖼️ Fixing avatar serving...');
    
    // Verify avatars exist
    const avatarDir = 'public/avatars';
    const requiredAvatars = ['alice.jpg', 'bob.jpg', 'jane.jpg', 'john.jpg', 'mike.jpg', 'client-1.jpg'];
    
    if (!fs.existsSync(avatarDir)) {
      fs.mkdirSync(avatarDir, { recursive: true });
      await this.log('✅ Created avatars directory');
    }
    
    let missingCount = 0;
    for (const avatar of requiredAvatars) {
      const filePath = path.join(avatarDir, avatar);
      if (!fs.existsSync(filePath)) {
        missingCount++;
        await this.log(`❌ Missing avatar: ${avatar}`);
      } else {
        // Verify file is readable
        try {
          fs.accessSync(filePath, fs.constants.R_OK);
          await this.log(`✅ Avatar verified: ${avatar}`);
        } catch (error) {
          await this.log(`⚠️ Avatar not readable: ${avatar}`);
        }
      }
    }
    
    if (missingCount === 0) {
      this.fixes.push('Avatar system verified - all 6 avatars present');
    } else {
      this.issues.push(`${missingCount} avatars missing or not accessible`);
    }
  }

  async testBuild() {
    await this.log('🏗️ Testing build after fixes...');
    
    const result = await this.executeCommand('npm run build');
    if (result.success) {
      await this.log('✅ Build successful after fixes');
      this.fixes.push('Build process validated');
      return true;
    } else {
      await this.log(`❌ Build still failing: ${result.stderr}`);
      this.issues.push('Build process still has issues');
      return false;
    }
  }

  async generateReport() {
    const report = `# 🔧 Critical Issues Fix Report
**Generated:** ${new Date().toISOString()}

## ✅ Fixes Applied
${this.fixes.map(fix => `- ✅ ${fix}`).join('\n') || '- None applied'}

## ⚠️ Remaining Issues
${this.issues.map(issue => `- ⚠️ ${issue}`).join('\n') || '- None identified'}

## 🎯 Next Steps
${this.issues.length === 0 ? 
  '- Run the unified test runner to validate all fixes\n- Execute `npm run test:unified-runner`' :
  '- Address remaining issues above\n- Re-run this fix script after making manual corrections'
}

---
*Report generated by Critical Issues Fixer v1.0*
`;

    fs.writeFileSync('CRITICAL_FIXES_REPORT.md', report);
    await this.log('📄 Fix report saved to CRITICAL_FIXES_REPORT.md');
    
    return report;
  }

  async run() {
    await this.log('🚀 Starting Critical Issues Fix Process');
    
    try {
      await this.fixWebpackCache();
      await this.fixAvatarServing();
      
      await this.log('🔄 Testing build after all fixes...');
      await this.testBuild();
      
      await this.generateReport();
      
      await this.log('🏁 Critical fixes completed!');
      await this.log(`✅ Applied ${this.fixes.length} fixes`);
      await this.log(`⚠️ ${this.issues.length} issues remaining`);
      
      return this.issues.length === 0;
      
    } catch (error) {
      await this.log(`💥 Fatal error during fixes: ${error.message}`);
      return false;
    }
  }
}

if (require.main === module) {
  const fixer = new CriticalIssueFixer();
  fixer.run().then(success => {
    console.log(success ? '🟢 All critical issues fixed!' : '🟡 Some issues remain - check report');
    process.exit(success ? 0 : 1);
  });
}

module.exports = CriticalIssueFixer; 