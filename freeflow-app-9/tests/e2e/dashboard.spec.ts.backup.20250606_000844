import { test, expect, Page } from '@playwright/test';

// Enhanced test configuration for authentication bypass
test.beforeEach(async ({ page }) => {
  // Set test environment headers to bypass authentication middleware
  await page.setExtraHTTPHeaders({
    'x-test-mode': 'true',
    'user-agent': 'Playwright/Test Runner - Dashboard Tests'
  });
  
  // Setup authentication and API mocking
  await setupDashboardTestEnvironment(page);
  
  // Navigate to dashboard page
  await page.goto('/dashboard');
  
  // Wait for page to load completely (reduce timeout to avoid delays)
  await page.waitForLoadState('domcontentloaded');
});

// Setup test environment with authentication bypass and API mocking
async function setupDashboardTestEnvironment(page: Page) {
  // Mock authentication state - simulate logged in user
  await page.addInitScript(() => {
    // Mock localStorage auth data
    window.localStorage.setItem('supabase.auth.token', JSON.stringify({
      access_token: 'test_access_token_dashboard',
      refresh_token: 'test_refresh_token_dashboard',
      expires_at: Date.now() + (24 * 60 * 60 * 1000), // 24 hours from now
      user: {
        id: 'test_user_dashboard_123',
        email: 'dashboard@test.com',
        name: 'Dashboard Test User'
      }
    }));
    
    // Mock session data
    window.sessionStorage.setItem('dashboard-access', 'granted');
  });

  // Mock API endpoints that dashboard might call
  await page.route('**/api/auth/**', async (route) => {
    const url = route.request().url();
    
    if (url.includes('/user') || url.includes('/session')) {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          user: {
            id: 'test_user_dashboard_123',
            email: 'dashboard@test.com',
            name: 'Dashboard Test User'
          },
          authenticated: true
        })
      });
    } else {
      await route.continue();
    }
  });

  // Mock dashboard data API endpoints
  await page.route('**/api/dashboard/**', async (route) => {
    const url = route.request().url();
    
    if (url.includes('/metrics')) {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          earnings: 47500,
          projects: 12,
          completionRate: 94,
          pendingPayments: 3
        })
      });
    } else if (url.includes('/projects')) {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          projects: [
            { id: 1, name: 'E-commerce Website Redesign', status: 'active', progress: 65 },
            { id: 2, name: 'Mobile App Development', status: 'completed', progress: 100 },
            { id: 3, name: 'Brand Identity Package', status: 'active', progress: 45 }
          ]
        })
      });
    } else {
      await route.continue();
    }
  });

  console.log('âœ… Dashboard test environment configured successfully');
}

// Test dashboard functionality using actual component structure and mock data
test.describe('Dashboard', () => {
  test.describe('Dashboard Rendering', () => {
    test('should render main dashboard layout correctly', async ({ page }) => {
      // Check main welcome section
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
      await expect(page.locator('text=Your complete freelance management platform')).toBeVisible();
      
      // Check navigation tabs are present
      await expect(page.locator('button[role="tab"]:has-text("Dashboard")')).toBeVisible();
      await expect(page.locator('button[role="tab"]:has-text("Projects")')).toBeVisible();
      await expect(page.locator('button[role="tab"]:has-text("Financial")')).toBeVisible();
      await expect(page.locator('button[role="tab"]:has-text("Files")')).toBeVisible();
    });

    test('should display dashboard overview when dashboard tab is active', async ({ page }) => {
      // Wait for page to load first
      await page.waitForTimeout(1000);
      
      // Ensure dashboard tab is active
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check dashboard overview heading (actual component text)
      await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible();
      await expect(page.locator('text=Welcome back! Here\'s what\'s happening with your freelance business.')).toBeVisible();
      
      // Check action buttons (actual component buttons)
      await expect(page.locator('button:has-text("Schedule Meeting")')).toBeVisible();
      await expect(page.locator('button:has-text("Send Update")')).toBeVisible();
    });

    test('should be responsive on mobile devices', async ({ page }) => {
      // Set mobile viewport
      await page.setViewportSize({ width: 375, height: 667 });
      
      // Check that main elements are still visible on mobile
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
      await expect(page.locator('button[role="tab"]:has-text("Dashboard")')).toBeVisible();
      
      // Check tab navigation works on mobile
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(1000);
      await expect(page.locator('h2:has-text("Projects Hub"), .card-title:has-text("Projects Hub")').first()).toBeVisible();
    });
  });

  test.describe('Dashboard Metrics Display', () => {
    test('should display key metrics cards correctly', async ({ page }) => {
      // Navigate to dashboard tab
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check Total Earnings card (actual mock data)
      await expect(page.locator('text=Total Earnings')).toBeVisible();
      await expect(page.locator('text=$47,500')).toBeVisible();
      await expect(page.locator('text=+12.5% from last month')).toBeVisible();
      
      // Check Active Projects card
      await expect(page.locator('text=Active Projects')).toBeVisible();
      await expect(page.locator('text=+2 new this week')).toBeVisible();
      
      // Check Completion Rate card
      await expect(page.locator('text=Completion Rate')).toBeVisible();
      
      // Check Pending Payments card
      await expect(page.locator('text=Pending Payments')).toBeVisible();
      await expect(page.locator('text=-1 from last week')).toBeVisible();
    });

    test('should display earnings chart with correct data', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check earnings overview chart section
      await expect(page.locator('text=Earnings Overview')).toBeVisible();
      await expect(page.locator('text=Your earnings over the last 6 months')).toBeVisible();
      
      // Chart should be rendered (SVG element from recharts)
      await expect(page.locator('svg').first()).toBeVisible();
    });

    test('should display project status distribution', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check project status chart
      await expect(page.locator('text=Project Status')).toBeVisible();
      await expect(page.locator('text=Distribution of your current projects')).toBeVisible();
      
      // Check project status legend items (more specific selectors)
      await expect(page.locator('span:has-text("Completed: 12")')).toBeVisible();
      await expect(page.locator('span:has-text("In Progress: 5")')).toBeVisible();
      await expect(page.locator('span:has-text("On Hold: 2")')).toBeVisible();
      await expect(page.locator('span:has-text("Planning: 3")')).toBeVisible();
    });
  });

  test.describe('Recent Activity and Analytics', () => {
    test('should display recent activity feed', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check recent activity section
      await expect(page.locator('text=Recent Activity')).toBeVisible();
      await expect(page.locator('text=Latest updates from your projects')).toBeVisible();
      
      // Check for sample activity items (from mock data)
      await expect(page.locator('text=New project milestone completed: E-commerce Website Phase 2')).toBeVisible();
      await expect(page.locator('text=2 hours ago')).toBeVisible();
    });

    test('should display weekly activity chart', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check weekly activity section
      await expect(page.locator('text=Weekly Activity')).toBeVisible();
      await expect(page.locator('text=Hours worked and tasks completed this week')).toBeVisible();
      
      // Chart should be present (second SVG element)
      await expect(page.locator('svg').nth(1)).toBeVisible();
    });

    test('should show monthly statistics', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Scroll to find monthly stats section
      await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
      
      // Check for This Month card (more specific selector)
      await expect(page.locator('h1:has-text("This Month"), h2:has-text("This Month"), h3:has-text("This Month"), .card-title:has-text("This Month")').first()).toBeVisible();
      await expect(page.locator('text=Revenue')).toBeVisible();
      // More specific selector for Projects in monthly stats context
      await expect(page.locator('.card-content span:has-text("Projects"), .card-content .text-sm:has-text("Projects")').first()).toBeVisible();
      await expect(page.locator('text=Hours')).toBeVisible();
    });
  });

  test.describe('Tab Navigation and Content', () => {
    test('should switch between different hub tabs correctly', async ({ page }) => {
      // Test Projects Hub - use more specific selector
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(1000);
      await expect(page.locator('h2:has-text("Projects Hub"), .card-title:has-text("Projects Hub")').first()).toBeVisible();
      
      // Test Financial Hub  
      await page.click('button[role="tab"]:has-text("Financial")');
      await page.waitForTimeout(500);
      await expect(page.locator('text=Financial Hub')).toBeVisible();
      
      // Test Files Hub (updated to match actual text)
      await page.click('button[role="tab"]:has-text("Files")');
      await page.waitForTimeout(500);
      await expect(page.locator('h3:has-text("Files Hub"), h2:has-text("Files Hub"), .card-title:has-text("Files Hub")').first()).toBeVisible();
      
      // Return to Dashboard
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible();
    });

    test('should maintain tab state correctly', async ({ page }) => {
      // Switch to Projects tab
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(500);
      
      // Refresh page
      await page.reload();
      await page.waitForLoadState('domcontentloaded');
      
      // Should return to default dashboard tab
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
    });
  });

  test.describe('Project Data Display', () => {
    test('should display project information correctly in projects hub', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(500);
      
      // Check for mock project data
      await expect(page.locator('text=E-commerce Website Redesign')).toBeVisible();
      await expect(page.locator('text=Mobile App Development')).toBeVisible();
      await expect(page.locator('text=Brand Identity Package')).toBeVisible();
      
      // Check project status badges (more specific locators)
      await expect(page.locator('.badge:has-text("active"), span.ml-1:has-text("active")').first()).toBeVisible();
      await expect(page.locator('.badge:has-text("completed"), span.ml-1:has-text("completed")').first()).toBeVisible();
    });

    test('should show project statistics and progress', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(500);
      
      // Look for project progress indicators (65%, 40%, 100% from mock data)
      await expect(page.locator('text=65%')).toBeVisible(); // E-commerce progress
      await expect(page.locator('text=40%')).toBeVisible(); // Mobile app progress  
      await expect(page.locator('text=100%')).toBeVisible(); // Brand identity progress
    });
  });

  test.describe('Financial Data Display', () => {
    test('should display financial overview correctly', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Financial")');
      await page.waitForTimeout(500);
      
      // Check for financial metrics
      await expect(page.locator('text=Financial Hub')).toBeVisible();
      await expect(page.locator('text=Revenue Overview')).toBeVisible();
      await expect(page.locator('text=Monthly revenue and expenses')).toBeVisible();
    });

    test('should show invoice and payment information', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Financial")');
      await page.waitForTimeout(500);
      
      // Check for invoice tabs (look for likely invoice-related content)
      await expect(page.locator('button:has-text("Outstanding"), button:has-text("Pending"), button:has-text("Invoices")').first()).toBeVisible();
    });
  });

  test.describe('User Experience and Interactions', () => {
    test('should handle loading states gracefully', async ({ page }) => {
      // Simulate slow network
      await page.route('**/*', async (route) => {
        await new Promise(resolve => setTimeout(resolve, 100));
        await route.continue();
      });
      
      // Page should still load successfully
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible({ timeout: 10000 });
    });

    test('should support keyboard navigation', async ({ page }) => {
      // Focus on first tab
      await page.locator('button[role="tab"]:has-text("Dashboard")').focus();
      
      // Use arrow keys to navigate between tabs
      await page.keyboard.press('ArrowRight');
      await page.keyboard.press('Enter');
      
      // Should switch to next tab
      await page.waitForTimeout(1000);
      await expect(page.locator('h2:has-text("Projects Hub"), .card-title:has-text("Projects Hub")').first()).toBeVisible();
    });

    test('should handle window resize correctly', async ({ page }) => {
      // Start with desktop size
      await page.setViewportSize({ width: 1200, height: 800 });
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
      
      // Resize to tablet
      await page.setViewportSize({ width: 768, height: 1024 });
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
      
      // Resize to mobile
      await page.setViewportSize({ width: 375, height: 667 });
      await expect(page.locator('h1:has-text("Welcome to FreeflowZee")')).toBeVisible();
    });
  });

  test.describe('Integration with Mock Data', () => {
    test('should display all mock projects correctly', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(500);
      
      // All three mock projects should be visible
      await expect(page.locator('text=E-commerce Website Redesign')).toBeVisible();
      await expect(page.locator('text=Mobile App Development')).toBeVisible();  
      await expect(page.locator('text=Brand Identity Package')).toBeVisible();
      
      // Check client associations
      await expect(page.locator('text=TechCorp Inc.')).toBeVisible();
      await expect(page.locator('text=StartupXYZ')).toBeVisible();
      await expect(page.locator('text=Design Agency Co.')).toBeVisible();
    });

    test('should display correct client information', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Projects")');
      await page.waitForTimeout(500);
      
      // Check client names from mock data
      await expect(page.locator('text=TechCorp Inc.')).toBeVisible();
      await expect(page.locator('text=StartupXYZ')).toBeVisible();
      await expect(page.locator('text=Design Agency Co.')).toBeVisible();
    });

    test('should show correct activity history', async ({ page }) => {
      await page.click('button[role="tab"]:has-text("Dashboard")');
      await page.waitForTimeout(500);
      
      // Check recent activities from mock data
      await expect(page.locator('text=New project milestone completed: E-commerce Website Phase 2')).toBeVisible();
      await expect(page.locator('text=Sarah left feedback on homepage design mockup')).toBeVisible();
      await expect(page.locator('text=Invoice #INV-001 payment received from TechCorp Inc.')).toBeVisible();
    });
  });
}); 