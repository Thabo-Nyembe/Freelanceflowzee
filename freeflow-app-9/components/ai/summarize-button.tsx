"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Sparkles, Copy, Check, Loader2 } from 'lucide-react';
import { getProjectSummary } from '@/app/(app)/dashboard/ai-assistant/actions';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { toast } from 'sonner';

interface SummarizeButtonProps {
  projectId: string;
}

export const SummarizeButton = ({ projectId }: SummarizeButtonProps) => {
  const [summary, setSummary] = useState<any>('');
  const [isLoading, setIsLoading] = useState<any>(false);
  const [isOpen, setIsOpen] = useState<any>(false);
  const [hasCopied, setHasCopied] = useState<any>(false);

  const handleSummarize = async () => {
    setIsLoading(true);
    setIsOpen(true); // Open dialog to show loading state
    const result = await getProjectSummary(projectId);
    
    if (result.error) {
      toast.error(result.error);
      setIsOpen(false); // Close dialog on error
    } else if (result.summary) {
      setSummary(result.summary);
    }
    setIsLoading(false);
  };

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(summary);
    setHasCopied(true);
    toast.success('Summary copied to clipboard!');
    setTimeout(() => setHasCopied(false), 2000);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button onClick={handleSummarize} variant="outline" size="sm">
          <Sparkles className="h-4 w-4 mr-2" />
          Summarize
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>AI Project Summary</DialogTitle>
          <DialogDescription>
            Here is a summary of the project, generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          {isLoading ? (
            <div className="flex items-center justify-center h-40">
              <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
              <p className="ml-4 text-gray-600">Generating summary...</p>
            </div>
          ) : (
            <div className="max-h-[50vh] overflow-y-auto p-4 bg-gray-50 rounded-md border">
              <p className="text-sm text-gray-800 whitespace-pre-wrap">{summary}</p>
            </div>
          )}
        </div>
        <DialogFooter>
          {!isLoading && (
            <Button variant="ghost" onClick={handleCopyToClipboard}>
              {hasCopied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
              {hasCopied ? 'Copied!' : 'Copy'}
            </Button>
          )}
          <Button onClick={() => setIsOpen(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
