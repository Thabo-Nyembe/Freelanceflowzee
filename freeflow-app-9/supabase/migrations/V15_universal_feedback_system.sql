-- Universal Feedback Table
-- This table stores contextual comments on various types of content blocks (video, audio, text, etc.)

CREATE TYPE feedback_target_type AS ENUM (
  'video',
  'image',
  'audio',
  'code',
  'text',
  'document'
);

CREATE TABLE public.feedback (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  document_id BIGINT NOT NULL, -- Assuming a parent 'documents' or 'projects' table
  target_type feedback_target_type NOT NULL,
  target_id TEXT NOT NULL, -- Can be block_id, video_id, etc.
  comment TEXT CHECK (char_length(comment) > 0),
  context_data JSONB, -- For storing timestamps, coordinates, text selections, etc.
  created_at TIMESTAMPTZ DEFAULT NOW(),
  resolved_at TIMESTAMPTZ,
  resolved_by UUID REFERENCES auth.users
);

COMMENT ON COLUMN public.feedback.document_id IS 'FK to the parent document/project housing the content.';
COMMENT ON COLUMN public.feedback.target_type IS 'The type of content the feedback is for (e.g., video, text).';
COMMENT ON COLUMN public.feedback.target_id IS 'Identifier for the specific block or asset receiving feedback.';
COMMENT ON COLUMN public.feedback.context_data IS 'JSON object for specific context, e.g., {"timestamp": "01:23"}, {"selection": "some text"}.';


-- Universal Suggestions Table (for Text)
-- This table stores proposed edits for text-based content.

CREATE TYPE suggestion_status AS ENUM (
  'pending',
  'accepted',
  'rejected'
);

CREATE TABLE public.suggestions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  document_id BIGINT NOT NULL,
  target_id TEXT NOT NULL, -- The specific text block ID being edited
  status suggestion_status NOT NULL DEFAULT 'pending',
  suggestion_data JSONB NOT NULL, -- For storing the actual proposed change
  created_at TIMESTAMPTZ DEFAULT NOW(),
  resolved_at TIMESTAMPTZ,
  resolved_by UUID REFERENCES auth.users
);

COMMENT ON COLUMN public.suggestions.document_id IS 'FK to the parent document/project housing the content.';
COMMENT ON COLUMN public.suggestions.target_id IS 'The specific text block this suggestion applies to.';
COMMENT ON COLUMN public.suggestions.suggestion_data IS 'JSON object with change data, e.g., {"type": "deletion", "start": 10, "end": 20}.';

-- Enable Row Level Security
ALTER TABLE public.feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.suggestions ENABLE ROW LEVEL SECURITY;

-- Policies: Users can see feedback/suggestions on documents they have access to.
-- NOTE: This assumes a 'documents' or 'projects' table with its own RLS policies.
-- We will need to create that table and join against it. For now, we'll allow select for authenticated users.

CREATE POLICY "Allow read access to authenticated users"
ON public.feedback
FOR SELECT
USING (auth.role() = 'authenticated');

CREATE POLICY "Allow users to insert their own feedback"
ON public.feedback
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow users to update their own feedback"
ON public.feedback
FOR UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Allow read access to authenticated users for suggestions"
ON public.suggestions
FOR SELECT
USING (auth.role() = 'authenticated');

CREATE POLICY "Allow users to insert their own suggestions"
ON public.suggestions
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow authors to update suggestion status (accept/reject)"
ON public.suggestions
FOR UPDATE
USING (
  -- This logic will need to be refined once we have a clear document ownership model.
  -- For now, allowing the user who created it to update it.
  auth.uid() = user_id
); 